//
// Generated by Bluespec Compiler, version 2023.07-7-g527eaa0b (build 527eaa0b)
//
// On Sun Oct 22 10:43:46 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_data                   O     1
// get_data                       O    64 reg
// RDY_get_data                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_data_i                     I    32
// put_data_j                     I    32
// EN_put_data                    I     1
// EN_get_data                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_mac_1x1(CLK,
		  RST_N,

		  put_data_i,
		  put_data_j,
		  EN_put_data,
		  RDY_put_data,

		  EN_get_data,
		  get_data,
		  RDY_get_data);
  input  CLK;
  input  RST_N;

  // action method put_data
  input  [31 : 0] put_data_i;
  input  [31 : 0] put_data_j;
  input  EN_put_data;
  output RDY_put_data;

  // actionvalue method get_data
  input  EN_get_data;
  output [63 : 0] get_data;
  output RDY_get_data;

  // signals for module outputs
  wire [63 : 0] get_data;
  wire RDY_get_data, RDY_put_data;

  // register rg_M00
  reg [31 : 0] rg_M00;
  wire [31 : 0] rg_M00$D_IN;
  wire rg_M00$EN;

  // register rg_i_next
  reg [31 : 0] rg_i_next;
  wire [31 : 0] rg_i_next$D_IN;
  wire rg_i_next$EN;

  // register rg_j_next
  reg [31 : 0] rg_j_next;
  wire [31 : 0] rg_j_next$D_IN;
  wire rg_j_next$EN;

  // register rg_mac_done
  reg rg_mac_done;
  wire rg_mac_done$D_IN, rg_mac_done$EN;

  // rule scheduling signals
  wire CAN_FIRE_get_data,
       CAN_FIRE_put_data,
       WILL_FIRE_get_data,
       WILL_FIRE_put_data;

  // remaining internal signals
  wire [63 : 0] put_data_i_MUL_put_data_j___d3;

  // action method put_data
  assign RDY_put_data = !rg_mac_done ;
  assign CAN_FIRE_put_data = !rg_mac_done ;
  assign WILL_FIRE_put_data = EN_put_data ;

  // actionvalue method get_data
  assign get_data = { rg_i_next, rg_j_next } ;
  assign RDY_get_data = rg_mac_done ;
  assign CAN_FIRE_get_data = rg_mac_done ;
  assign WILL_FIRE_get_data = EN_get_data ;

  // register rg_M00
  assign rg_M00$D_IN = put_data_i_MUL_put_data_j___d3[31:0] + rg_M00 ;
  assign rg_M00$EN = EN_put_data ;

  // register rg_i_next
  assign rg_i_next$D_IN = put_data_i ;
  assign rg_i_next$EN = EN_put_data ;

  // register rg_j_next
  assign rg_j_next$D_IN = put_data_j ;
  assign rg_j_next$EN = EN_put_data ;

  // register rg_mac_done
  assign rg_mac_done$D_IN = !EN_get_data ;
  assign rg_mac_done$EN = EN_get_data || EN_put_data ;

  // remaining internal signals
  assign put_data_i_MUL_put_data_j___d3 = put_data_i * put_data_j ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_M00 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_i_next <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_j_next <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_mac_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_M00$EN) rg_M00 <= `BSV_ASSIGNMENT_DELAY rg_M00$D_IN;
	if (rg_i_next$EN) rg_i_next <= `BSV_ASSIGNMENT_DELAY rg_i_next$D_IN;
	if (rg_j_next$EN) rg_j_next <= `BSV_ASSIGNMENT_DELAY rg_j_next$D_IN;
	if (rg_mac_done$EN)
	  rg_mac_done <= `BSV_ASSIGNMENT_DELAY rg_mac_done$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_M00 = 32'hAAAAAAAA;
    rg_i_next = 32'hAAAAAAAA;
    rg_j_next = 32'hAAAAAAAA;
    rg_mac_done = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_data)
	$display(" -- (in mac 1x1) -- 2. MAC got i and j values: %0d, %0d",
		 $signed(put_data_i),
		 $signed(put_data_j));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_data)
	$display(" -- (in mac 1x1) -- 3. **** MAC containts %0d ****",
		 $signed(rg_M00));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_data)
	$display(" -- (in mac 1x1) -- 4. MAC forwards %0d and %0d",
		 $signed(rg_i_next),
		 $signed(rg_j_next));
  end
  // synopsys translate_on
endmodule  // mk_mac_1x1

