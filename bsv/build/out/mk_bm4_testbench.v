//
// Generated by Bluespec Compiler, version 2023.07-7-g527eaa0b (build 527eaa0b)
//
// On Sat Oct 21 23:23:00 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_bm4_testbench(CLK,
			RST_N);
  input  CLK;
  input  RST_N;

  // register rg_in_1
  reg [31 : 0] rg_in_1;
  wire [31 : 0] rg_in_1$D_IN;
  wire rg_in_1$EN;

  // register rg_in_2
  reg [31 : 0] rg_in_2;
  wire [31 : 0] rg_in_2$D_IN;
  wire rg_in_2$EN;

  // register rg_in_3
  reg [31 : 0] rg_in_3;
  wire [31 : 0] rg_in_3$D_IN;
  wire rg_in_3$EN;

  // register rg_in_4
  reg [31 : 0] rg_in_4;
  wire [31 : 0] rg_in_4$D_IN;
  wire rg_in_4$EN;

  // ports of submodule bm4
  wire [127 : 0] bm4$mav_return_output;
  wire [31 : 0] bm4$ma_get_inputs_in1,
		bm4$ma_get_inputs_in2,
		bm4$ma_get_inputs_in3,
		bm4$ma_get_inputs_in4;
  wire bm4$EN_ma_get_inputs,
       bm4$EN_mav_return_output,
       bm4$RDY_ma_get_inputs,
       bm4$RDY_mav_return_output;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_get_result,
       CAN_FIRE_RL_rl_send_data,
       WILL_FIRE_RL_rl_get_result,
       WILL_FIRE_RL_rl_send_data;

  // submodule bm4
  mk_bm4 bm4(.CLK(CLK),
	     .RST_N(RST_N),
	     .ma_get_inputs_in1(bm4$ma_get_inputs_in1),
	     .ma_get_inputs_in2(bm4$ma_get_inputs_in2),
	     .ma_get_inputs_in3(bm4$ma_get_inputs_in3),
	     .ma_get_inputs_in4(bm4$ma_get_inputs_in4),
	     .EN_ma_get_inputs(bm4$EN_ma_get_inputs),
	     .EN_mav_return_output(bm4$EN_mav_return_output),
	     .RDY_ma_get_inputs(bm4$RDY_ma_get_inputs),
	     .mav_return_output(bm4$mav_return_output),
	     .RDY_mav_return_output(bm4$RDY_mav_return_output));

  // rule RL_rl_send_data
  assign CAN_FIRE_RL_rl_send_data = bm4$RDY_ma_get_inputs ;
  assign WILL_FIRE_RL_rl_send_data = bm4$RDY_ma_get_inputs ;

  // rule RL_rl_get_result
  assign CAN_FIRE_RL_rl_get_result = bm4$RDY_mav_return_output ;
  assign WILL_FIRE_RL_rl_get_result = bm4$RDY_mav_return_output ;

  // register rg_in_1
  assign rg_in_1$D_IN = 32'h0 ;
  assign rg_in_1$EN = 1'b0 ;

  // register rg_in_2
  assign rg_in_2$D_IN = 32'h0 ;
  assign rg_in_2$EN = 1'b0 ;

  // register rg_in_3
  assign rg_in_3$D_IN = 32'h0 ;
  assign rg_in_3$EN = 1'b0 ;

  // register rg_in_4
  assign rg_in_4$D_IN = 32'h0 ;
  assign rg_in_4$EN = 1'b0 ;

  // submodule bm4
  assign bm4$ma_get_inputs_in1 = rg_in_1 ;
  assign bm4$ma_get_inputs_in2 = rg_in_2 ;
  assign bm4$ma_get_inputs_in3 = rg_in_3 ;
  assign bm4$ma_get_inputs_in4 = rg_in_4 ;
  assign bm4$EN_ma_get_inputs = bm4$RDY_ma_get_inputs ;
  assign bm4$EN_mav_return_output = bm4$RDY_mav_return_output ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_in_1 <= `BSV_ASSIGNMENT_DELAY 32'd4;
	rg_in_2 <= `BSV_ASSIGNMENT_DELAY 32'd3;
	rg_in_3 <= `BSV_ASSIGNMENT_DELAY 32'd2;
	rg_in_4 <= `BSV_ASSIGNMENT_DELAY 32'd1;
      end
    else
      begin
        if (rg_in_1$EN) rg_in_1 <= `BSV_ASSIGNMENT_DELAY rg_in_1$D_IN;
	if (rg_in_2$EN) rg_in_2 <= `BSV_ASSIGNMENT_DELAY rg_in_2$D_IN;
	if (rg_in_3$EN) rg_in_3 <= `BSV_ASSIGNMENT_DELAY rg_in_3$D_IN;
	if (rg_in_4$EN) rg_in_4 <= `BSV_ASSIGNMENT_DELAY rg_in_4$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_in_1 = 32'hAAAAAAAA;
    rg_in_2 = 32'hAAAAAAAA;
    rg_in_3 = 32'hAAAAAAAA;
    rg_in_4 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (bm4$RDY_ma_get_inputs)
	$display(" -- TB -- Sending data: %0d %0d %0d %0d",
		 $signed(rg_in_1),
		 $signed(rg_in_2),
		 $signed(rg_in_3),
		 $signed(rg_in_4));
    if (RST_N != `BSV_RESET_VALUE)
      if (bm4$RDY_mav_return_output)
	$display(" -- TB -- Output is %0d %0d %0d %0d",
		 $signed(bm4$mav_return_output[127:96]),
		 $signed(bm4$mav_return_output[95:64]),
		 $signed(bm4$mav_return_output[63:32]),
		 $signed(bm4$mav_return_output[31:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (bm4$RDY_mav_return_output) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mk_bm4_testbench

